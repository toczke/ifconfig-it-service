name: Deploy IT Service Containers

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  FRONTEND_PORT: 8080
  BOT_PORT: 3001

jobs:
  cleanup:
    runs-on: self-hosted
    steps:
      - name: Cleanup old containers
        run: |
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker compose -f docker-compose.yml down || true
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker system prune -a -f

  checkout:
    runs-on: self-hosted
    needs: cleanup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

  deploy:
    runs-on: self-hosted
    needs: checkout
    steps:
      - name: Verify directory structure
        run: |
          echo "Repository contents:"
          ls -la
          echo "Packages directory:"
          ls -la packages/
          echo "Frontend directory:"
          ls -la packages/static-frontend/
          echo "Bot directory:"
          ls -la packages/discord-bot/

      - name: Create production .env
        run: |
          cat <<EOF > .env
          # Discord Bot
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          CHANNELS_NEW_REQUESTS=${{ secrets.CHANNELS_NEW_REQUESTS }}
          CHANNELS_IN_PROGRESS=${{ secrets.CHANNELS_IN_PROGRESS }}
          CHANNELS_DONE=${{ secrets.CHANNELS_DONE }}
          CHANNELS_REJECTED=${{ secrets.CHANNELS_REJECTED }}
          FRONTEND_URL=http://localhost:${{ env.FRONTEND_PORT }}
          
          # Frontend
          VITE_BOT_API_URL=http://localhost:${{ env.BOT_PORT }}
          NODE_ENV=production
          EOF

      - name: Build and deploy containers
        run: |
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker compose -f docker-compose.yml up -d --build

      - name: Verify deployment
        run: |
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker ps
          echo "Frontend should be available on port ${{ env.FRONTEND_PORT }}"
          echo "Bot should be available on port ${{ env.BOT_PORT }}"